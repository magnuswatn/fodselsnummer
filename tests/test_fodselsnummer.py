"""Tests for `fodselsnummer.py`."""

import unittest
import datetime
import fodselsnummer

class FodselsnummerTestCase(unittest.TestCase):
    """Tests for the fodselsnummer functions`."""

    def test_valid_fnr_is_valid(self):
        """Is the valid fnr valid?"""
        valid_fnr = '04098049628'
        self.assertTrue(fodselsnummer.check_fnr(valid_fnr))

    def test_valid_fnr_with_pre_garbage(self):
        valid_fnr = 'garbage04098049628'
        self.assertFalse(fodselsnummer.check_fnr(valid_fnr))

    def test_valid_fnr_with_post_garbage(self):
        valid_fnr = '04098049628garbage'
        self.assertFalse(fodselsnummer.check_fnr(valid_fnr))

    def test_valid_pnr_with_invalid_dates(self):
        """Fnrs with valid control digits, but invalid date"""
        self.assertFalse(fodselsnummer.check_fnr('80205870001'))
        self.assertFalse(fodselsnummer.check_fnr('80311850001'))

    def test_invalid_fnr_is_invalid(self):
        """Is the invalid fnr invalid?"""
        invalid_fnr = '01078018943'
        self.assertFalse(fodselsnummer.check_fnr(invalid_fnr))

    def test_valid_dnr_is_valid(self):
        valid_dnr = '41031883219'
        self.assertTrue(fodselsnummer.check_fnr(valid_dnr))

    def test_valid_dnr_is_invalid_when_turned_off(self):
        valid_dnr = '41031883219'
        self.assertFalse(fodselsnummer.check_fnr(valid_dnr, d_numbers=False))

    def test_valid_fnr_is_valid_when_d_numbers_turned_off(self):
        valid_fnr = '04098049628'
        self.assertTrue(fodselsnummer.check_fnr(valid_fnr, d_numbers=False))

    def test_does_control_digits_match(self):
        """Does the control digit function work?"""
        incomplete_fnr = '311200136'
        complete_fnr = '31120013605'
        generated_fnr = fodselsnummer._generate_control_digits(incomplete_fnr)
        self.assertEqual(generated_fnr, complete_fnr)

    # List are taken from: http://www.fnrinfo.no/Verktoy/FinnLovlige_Dato.aspx

    def test_1900s_sample_day(self):
        """Does a generated list match a list from another generator?"""
        sample_day = datetime.datetime.strptime('1997-10-16', "%Y-%m-%d").date()

        # fnrinfo.no does not include individual numbers from 900-100
        # that were used between 1940 and 1999, so the lists doesn't match
        # but all fnrs from fnrinfo.no should be in our list
        sample_fnr = [
            '16109749579', '16109749307', '16109749145', '16109748947',
            '16109748785', '16109748513', '16109748351', '16109747991',
            '16109747568', '16109747134', '16109746936', '16109746774',
            '16109746502', '16109746340', '16109746189', '16109745980',
            '16109745719', '16109745557', '16109745395', '16109745123',
            '16109744925', '16109744763', '16109744178', '16109743708',
            '16109743546', '16109743384', '16109743112', '16109742914',
            '16109742752', '16109742590', '16109742329', '16109742167',
            '16109741969', '16109741535', '16109741373', '16109741101',
            '16109740903', '16109740741', '16109740318', '16109740156',
            '16109739778', '16109739506', '16109739344', '16109739182',
            '16109738984', '16109738712', '16109738550', '16109738399',
            '16109738127', '16109737929', '16109737767', '16109737333',
            '16109735322', '16109735160', '16109734962', '16109734539',
            '16109734377', '16109734105', '16109733907', '16109733745',
            '16109733583', '16109733311', '16109732951', '16109732528',
            '16109732366', '16109731734', '16109731572', '16109731300',
            '16109731149', '16109730940', '16109730789', '16109730517',
            '16109730355', '16109730193', '16109729977', '16109729705',
            '16109729543', '16109729381', '16109728911', '16109728598',
            '16109728326', '16109728164', '16109727966', '16109727532',
            '16109727370', '16109727109', '16109726900', '16109726749',
            '16109726587', '16109726315', '16109726153', '16109725955',
            '16109725793', '16109725521', '16109724738', '16109724576',
            '16109724304', '16109724142', '16109723944', '16109723782',
            '16109723510', '16109723359', '16109723197', '16109722999',
            '16109722727', '16109722565', '16109722131', '16109721933',
            '16109721771', '16109721348', '16109721186', '16109720988',
            '16109720716', '16109720554', '16109720392', '16109720120',
            '16109719904', '16109719742', '16109719580', '16109719319',
            '16109719157', '16109718959', '16109718797', '16109718525',
            '16109718363', '16109717731', '16109717308', '16109717146',
            '16109716948', '16109716786', '16109716514', '16109716352',
            '16109716190', '16109715992', '16109715720', '16109715569',
            '16109715135', '16109714937', '16109714775', '16109714503',
            '16109714341', '16109713981', '16109713558', '16109713396',
            '16109713124', '16109712926', '16109712764', '16109712330',
            '16109712179', '16109711970', '16109711709', '16109711547',
            '16109711385', '16109711113', '16109710915', '16109710753',
            '16109710591', '16109710168', '16109709941', '16109709518',
            '16109709356', '16109709194', '16109708996', '16109708724',
            '16109708562', '16109708139', '16109707930', '16109707779',
            '16109707507', '16109707345', '16109707183', '16109706985',
            '16109706713', '16109706551', '16109706128', '16109705768',
            '16109705334', '16109705172', '16109704974', '16109704702',
            '16109704540', '16109704389', '16109704117', '16109703919',
            '16109703757', '16109703595', '16109703323', '16109703161',
            '16109702963', '16109702378', '16109702106', '16109701908',
            '16109701746', '16109701584', '16109701312', '16109701150',
            '16109700952', '16109700790', '16109700529', '16109700367',
            '16109749811', '16109749498', '16109749226', '16109749064',
            '16109748866', '16109748432', '16109748270', '16109748009',
            '16109747800', '16109747649', '16109747487', '16109747215',
            '16109747053', '16109746855', '16109746693', '16109746421',
            '16109745638', '16109745476', '16109745204', '16109745042',
            '16109744844', '16109744682', '16109744410', '16109744259',
            '16109744097', '16109743899', '16109743627', '16109743465',
            '16109743031', '16109742833', '16109742671', '16109742248',
            '16109742086', '16109741888', '16109741616', '16109741454',
            '16109741292', '16109741020', '16109740822', '16109740660',
            '16109740237', '16109740075', '16109739859', '16109739697',
            '16109739425', '16109739263', '16109738631', '16109738208',
            '16109738046', '16109737848', '16109737686', '16109737414',
            '16109737252', '16109737090', '16109736892', '16109736620',
            '16109736469', '16109736035', '16109735837', '16109735675',
            '16109735403', '16109735241', '16109734881', '16109734458',
            '16109734296', '16109734024', '16109733826', '16109733664',
            '16109733230', '16109733079', '16109732870', '16109732609',
            '16109732447', '16109732285', '16109732013', '16109731815',
            '16109731653', '16109731491', '16109731068', '16109730436',
            '16109730274', '16109730002', '16109729896', '16109729624',
            '16109729462', '16109729039', '16109728830', '16109728679',
            '16109728407', '16109728245', '16109728083', '16109727885',
            '16109727613', '16109727451', '16109727028', '16109726668',
            '16109726234', '16109726072', '16109725874', '16109725602',
            '16109725440', '16109725289', '16109725017', '16109724819',
            '16109724657', '16109724495', '16109724223', '16109724061',
            '16109723863', '16109723278', '16109723006', '16109722808',
            '16109722646', '16109722484', '16109722212', '16109722050',
            '16109721852', '16109721690', '16109721429', '16109721267',
            '16109720635', '16109720473', '16109720201', '16109719823',
            '16109719661', '16109719238', '16109719076', '16109718878',
            '16109718606', '16109718444', '16109718282', '16109718010',
            '16109717812', '16109717650', '16109717499', '16109717227',
            '16109717065', '16109716867', '16109716433', '16109716271',
            '16109715801', '16109715488', '16109715216', '16109715054',
            '16109714856', '16109714694', '16109714422', '16109714260',
            '16109713639', '16109713477', '16109713205', '16109713043',
            '16109712845', '16109712683', '16109712411', '16109712098',
            '16109711628', '16109711466', '16109711032', '16109710834',
            '16109710672', '16109710400', '16109710249', '16109710087',
            '16109709860', '16109709437', '16109709275', '16109709003',
            '16109708805', '16109708643', '16109708481', '16109708058',
            '16109707698', '16109707426', '16109707264', '16109706632',
            '16109706470', '16109706209', '16109706047', '16109705849',
            '16109705687', '16109705415', '16109705253', '16109705091',
            '16109704893', '16109704621', '16109704036', '16109703838',
            '16109703676', '16109703404', '16109703242', '16109703080',
            '16109702882', '16109702610', '16109702459', '16109702297',
            '16109702025', '16109701827', '16109701665', '16109701231',
            '16109700871', '16109700448', '16109700286', '16109700014',
            '16109749730']

        result = fodselsnummer.generate_fnr_for_day(sample_day, False)
        compare = [i for i in sample_fnr if i in result]

        self.assertEqual(compare, sample_fnr)

    def test_2000s_sample_day(self):
        """Does a generated list match a list from another generator?"""
        sample_day = datetime.datetime.strptime('2004-02-29', "%Y-%m-%d").date()
        sample_fnr = [
            '29020499778', '29020499506', '29020499344', '29020499182',
            '29020498984', '29020498712', '29020498550', '29020498399',
            '29020498127', '29020497929', '29020497767', '29020497333',
            '29020497171', '29020496973', '29020496701', '29020496388',
            '29020496116', '29020495918', '29020495756', '29020495594',
            '29020495322', '29020495160', '29020494962', '29020494539',
            '29020494377', '29020494105', '29020493907', '29020493745',
            '29020493583', '29020493311', '29020492951', '29020492528',
            '29020492366', '29020491734', '29020491572', '29020491300',
            '29020491149', '29020490940', '29020490789', '29020490517',
            '29020490355', '29020490193', '29020489977', '29020489705',
            '29020489543', '29020489381', '29020488911', '29020488598',
            '29020488326', '29020488164', '29020487966', '29020487532',
            '29020487370', '29020487109', '29020486900', '29020486749',
            '29020486587', '29020486315', '29020486153', '29020485955',
            '29020485793', '29020485521', '29020484738', '29020484576',
            '29020484304', '29020484142', '29020483944', '29020483782',
            '29020483510', '29020483359', '29020483197', '29020482999',
            '29020482727', '29020482565', '29020482131', '29020481933',
            '29020481771', '29020481348', '29020481186', '29020480988',
            '29020480716', '29020480554', '29020480392', '29020480120',
            '29020479904', '29020479742', '29020479580', '29020479319',
            '29020479157', '29020478959', '29020478797', '29020478525',
            '29020478363', '29020477731', '29020477308', '29020477146',
            '29020476948', '29020476786', '29020476514', '29020476352',
            '29020476190', '29020475992', '29020475720', '29020475569',
            '29020475135', '29020474937', '29020474775', '29020474503',
            '29020474341', '29020473981', '29020473558', '29020473396',
            '29020473124', '29020472926', '29020472764', '29020472330',
            '29020472179', '29020471970', '29020471709', '29020471547',
            '29020471385', '29020471113', '29020470915', '29020470753',
            '29020470591', '29020470168', '29020469941', '29020469518',
            '29020469356', '29020469194', '29020468996', '29020468724',
            '29020468562', '29020468139', '29020467930', '29020467779',
            '29020467507', '29020467345', '29020467183', '29020466985',
            '29020466713', '29020466551', '29020466128', '29020465768',
            '29020465334', '29020465172', '29020464974', '29020464702',
            '29020464540', '29020464389', '29020464117', '29020463919',
            '29020463757', '29020463595', '29020463323', '29020463161',
            '29020462963', '29020462378', '29020462106', '29020461908',
            '29020461746', '29020461584', '29020461312', '29020461150',
            '29020460952', '29020460790', '29020460529', '29020460367',
            '29020459989', '29020459717', '29020459555', '29020459393',
            '29020459121', '29020458923', '29020458761', '29020458338',
            '29020458176', '29020457978', '29020457706', '29020457544',
            '29020457382', '29020457110', '29020456912', '29020456750',
            '29020456599', '29020456327', '29020456165', '29020455967',
            '29020455533', '29020455371', '29020454901', '29020454588',
            '29020454316', '29020454154', '29020453956', '29020453794',
            '29020453522', '29020453360', '29020452739', '29020452577',
            '29020452305', '29020452143', '29020451945', '29020451783',
            '29020451511', '29020451198', '29020450728', '29020450566',
            '29020450132', '29020499859', '29020499697', '29020499425',
            '29020499263', '29020498631', '29020498208', '29020498046',
            '29020497848', '29020497686', '29020497414', '29020497252',
            '29020497090', '29020496892', '29020496620', '29020496469',
            '29020496035', '29020495837', '29020495675', '29020495403',
            '29020495241', '29020494881', '29020494458', '29020494296',
            '29020494024', '29020493826', '29020493664', '29020493230',
            '29020493079', '29020492870', '29020492609', '29020492447',
            '29020492285', '29020492013', '29020491815', '29020491653',
            '29020491491', '29020491068', '29020490436', '29020490274',
            '29020490002', '29020489896', '29020489624', '29020489462',
            '29020489039', '29020488830', '29020488679', '29020488407',
            '29020488245', '29020488083', '29020487885', '29020487613',
            '29020487451', '29020487028', '29020486668', '29020486234',
            '29020486072', '29020485874', '29020485602', '29020485440',
            '29020485289', '29020485017', '29020484819', '29020484657',
            '29020484495', '29020484223', '29020484061', '29020483863',
            '29020483278', '29020483006', '29020482808', '29020482646',
            '29020482484', '29020482212', '29020482050', '29020481852',
            '29020481690', '29020481429', '29020481267', '29020480635',
            '29020480473', '29020480201', '29020479823', '29020479661',
            '29020479238', '29020479076', '29020478878', '29020478606',
            '29020478444', '29020478282', '29020478010', '29020477812',
            '29020477650', '29020477499', '29020477227', '29020477065',
            '29020476867', '29020476433', '29020476271', '29020475801',
            '29020475488', '29020475216', '29020475054', '29020474856',
            '29020474694', '29020474422', '29020474260', '29020473639',
            '29020473477', '29020473205', '29020473043', '29020472845',
            '29020472683', '29020472411', '29020472098', '29020471628',
            '29020471466', '29020471032', '29020470834', '29020470672',
            '29020470400', '29020470249', '29020470087', '29020469860',
            '29020469437', '29020469275', '29020469003', '29020468805',
            '29020468643', '29020468481', '29020468058', '29020467698',
            '29020467426', '29020467264', '29020466632', '29020466470',
            '29020466209', '29020466047', '29020465849', '29020465687',
            '29020465415', '29020465253', '29020465091', '29020464893',
            '29020464621', '29020464036', '29020463838', '29020463676',
            '29020463404', '29020463242', '29020463080', '29020462882',
            '29020462610', '29020462459', '29020462297', '29020462025',
            '29020461827', '29020461665', '29020461231', '29020460871',
            '29020460448', '29020460286', '29020460014', '29020459636',
            '29020459474', '29020459202', '29020459040', '29020458842',
            '29020458680', '29020458419', '29020458257', '29020458095',
            '29020457897', '29020457625', '29020457463', '29020456831',
            '29020456408', '29020456246', '29020456084', '29020455886',
            '29020455614', '29020455452', '29020455290', '29020455029',
            '29020454820', '29020454669', '29020454235', '29020454073',
            '29020453875', '29020453603', '29020453441', '29020453018',
            '29020452658', '29020452496', '29020452224', '29020452062',
            '29020451864', '29020451430', '29020451279', '29020451007',
            '29020450809', '29020450647', '29020450485', '29020450213',
            '29020450051']

        result = fodselsnummer.generate_fnr_for_day(sample_day, False)
        compare = [i for i in sample_fnr if i in result]

        self.assertEqual(compare, sample_fnr)
        self.assertEqual(len(result), len(sample_fnr))

if __name__ == '__main__':
    unittest.main()
